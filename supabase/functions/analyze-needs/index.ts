import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface SurveyData {
  what_looking_for: string;
  room_type: string;
  budget_range: string;
  quality_level: string;
  additional_info: string;
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { surveyData }: { surveyData: SurveyData } = await req.json()

    // Get OpenAI API key from environment
    const openaiApiKey = Deno.env.get('OPENAI_API_KEY')
    
    if (!openaiApiKey) {
      console.log('OpenAI API key not configured, using fallback response')
      return new Response(
        JSON.stringify({ 
          response: generateFallbackResponse(surveyData),
          source: 'fallback'
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200 
        }
      )
    }

    // Generate prompt for OpenAI
    const prompt = generatePrompt(surveyData)
    
    // Call OpenAI API
    const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openaiApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4',
        messages: [
          {
            role: 'system',
            content: getSystemPrompt()
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.1,
        max_tokens: 3000
      })
    })

    if (!openaiResponse.ok) {
      throw new Error(`OpenAI API error: ${openaiResponse.status}`)
    }

    const openaiData = await openaiResponse.json()
    const aiResponse = openaiData.choices[0]?.message?.content

    if (!aiResponse) {
      throw new Error('No response from OpenAI')
    }

    return new Response(
      JSON.stringify({ 
        response: aiResponse,
        source: 'openai'
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200 
      }
    )

  } catch (error) {
    console.error('Error in analyze-needs function:', error)
    
    // Return fallback response on error
    const { surveyData } = await req.json().catch(() => ({ surveyData: null }))
    
    if (surveyData) {
      return new Response(
        JSON.stringify({ 
          response: generateFallbackResponse(surveyData),
          source: 'fallback',
          error: 'API temporarily unavailable'
        }),
        { 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          status: 200 
        }
      )
    }

    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500 
      }
    )
  }
})

function getSystemPrompt(): string {
  return `ROLA I CELE
Jeste≈õ ekspertem ds. analizy potrzeb klient√≥w i rekomendacji zakupowych w bran≈ºy budowlanej. Twoim zadaniem jest przeprowadzenie trzystopniowej analizy potrzeb klienta i dostarczenie konkretnych, praktycznych rekomendacji produktowych.

KROK 1: ANALIZA POTRZEB KLIENTA
Zadania w tym kroku:
- Przeanalizuj potrzeby klienta na podstawie podanych informacji
- Zidentyfikuj kluczowe wymagania techniczne
- Okre≈õl specyfikƒô pomieszczenia i jego wymagania
- Uwzglƒôdnij bud≈ºet i oczekiwania jako≈õciowe
- Zidentyfikuj potencjalne wyzwania i ograniczenia

Format outputu Kroku 1:
## ANALIZA POTRZEB KLIENTA

**Identyfikacja potrzeb:**
- [szczeg√≥≈Çowa analiza tego czego szuka klient]

**Wymagania techniczne:**
- [specyfikacja techniczna dla danego pomieszczenia]

**Bud≈ºet i jako≈õƒá:**
- [analiza bud≈ºetu w kontek≈õcie oczekiwa≈Ñ jako≈õciowych]

**Potencjalne wyzwania:**
- [identyfikacja mo≈ºliwych problem√≥w i ogranicze≈Ñ]

KROK 2: PROPOZYCJE PRODUKTOWE
Zadania w tym kroku:
- Zaproponuj 3 warianty produktowe (ekonomiczny, optymalny, premium)
- Dla ka≈ºdego wariantu podaj konkretne produkty dostƒôpne w Polsce
- Uwzglƒôdnij sklepy budowlane: Castorama, Leroy Merlin, OBI
- Podaj realistyczne ceny w z≈Çotych polskich
- Uwzglƒôdnij materia≈Çy g≈Ç√≥wne i pomocnicze

Format outputu Kroku 2:
## PROPOZYCJE PRODUKTOWE

### WARIANT EKONOMICZNY
**Ca≈Çkowity koszt: [X PLN]**

| Produkt | Model/Marka | Cena | Sklep | Uwagi |
|---------|-------------|------|-------|-------|
| [nazwa] | [model]     | [PLN]| [sklep]| [uwagi]|

### WARIANT OPTYMALNY (POLECANY)
**Ca≈Çkowity koszt: [X PLN]**

[analogiczna tabela]

### WARIANT PREMIUM
**Ca≈Çkowity koszt: [X PLN]**

[analogiczna tabela]

KROK 3: REKOMENDACJE PRODUKTOWE
Zadania w tym kroku:
- Wybierz najlepszy wariant dla klienta
- Uzasadnij wyb√≥r
- Podaj szczeg√≥≈Çowe instrukcje zakupu i monta≈ºu
- Uwzglƒôdnij aspekty bezpiecze≈Ñstwa
- Dodaj praktyczne porady

Format outputu Kroku 3:
## REKOMENDACJE PRODUKTOWE

### NAJLEPSZA OPCJA DLA CIEBIE
**Wybrany wariant:** [ekonomiczny/optymalny/premium]

**Uzasadnienie wyboru:**
[dlaczego ten wariant jest najlepszy dla klienta]

### SZCZEG√ì≈ÅOWE INSTRUKCJE

#### LISTA ZAKUP√ìW
1. [produkt 1] - [ilo≈õƒá] - [sklep] - [cena]
2. [produkt 2] - [ilo≈õƒá] - [sklep] - [cena]

#### PRZYGOTOWANIE
- [kroki przygotowawcze]

#### MONTA≈ª
- [instrukcje monta≈ºu krok po kroku]

#### BEZPIECZE≈ÉSTWO
- [zasady bezpiecze≈Ñstwa]

#### KONSERWACJA
- [porady dotyczƒÖce konserwacji]

DODATKOWE WYTYCZNE:
- U≈ºywaj konkretnych nazw produkt√≥w i marek dostƒôpnych w Polsce
- Podawaj realistyczne ceny aktualne na rok 2024/2025
- Uwzglƒôdniaj polskie normy i przepisy budowlane
- Pisz w spos√≥b zrozumia≈Çy dla laika
- Dodawaj praktyczne porady i wskaz√≥wki
- Uwzglƒôdniaj sezonowo≈õƒá i dostƒôpno≈õƒá produkt√≥w`
}

function generatePrompt(data: SurveyData): string {
  return `WYWIAD Z KLIENTEM:

DANE KLIENTA:
- Czego szuka: ${data.what_looking_for}
- Pomieszczenie: ${data.room_type}
- Bud≈ºet: ${data.budget_range}
- Poziom jako≈õci: ${data.quality_level}
- Dodatkowe informacje: ${data.additional_info || 'Brak'}

Przeprowad≈∫ kompletnƒÖ trzystopniowƒÖ analizƒô zgodnie z instrukcjami systemowymi. Uwzglƒôdnij wszystkie 3 kroki:
1. ANALIZA POTRZEB KLIENTA
2. PROPOZYCJE PRODUKTOWE
3. REKOMENDACJE PRODUKTOWE

Pamiƒôtaj o:
- Konkretnych produktach dostƒôpnych w Polsce
- Realistycznych cenach w z≈Çotych
- Praktycznych instrukcjach monta≈ºu
- Aspektach bezpiecze≈Ñstwa
- Polskich przepisach i normach`
}

function generateFallbackResponse(data: SurveyData): string {
  const { what_looking_for, room_type, budget_range, quality_level } = data
  
  return `## üîç ANALIZA POTRZEB (TRYB OFFLINE)

‚ö†Ô∏è **Uwaga**: Obecnie u≈ºywamy trybu offline. Aby uzyskaƒá prawdziwe rekomendacje AI, skonfiguruj Supabase Edge Function.

Szukasz **${what_looking_for}** do **${room_type.toLowerCase()}i** z bud≈ºetem **${budget_range}** w jako≈õci **${quality_level.toLowerCase()}**.

## üí° REKOMENDOWANE OPCJE

### ü•â OPCJA EKONOMICZNA
**Produkt:** ${getProductName(what_looking_for, 'basic')}
**Cena:** ${getPrice(budget_range, 'low')} z≈Ç/m¬≤
**Sklep:** Castorama
**Opis:** Solidna jako≈õƒá w przystƒôpnej cenie, idealna dla os√≥b o ograniczonym bud≈ºecie.

### ü•à OPCJA OPTYMALNA (POLECANA)
**Produkt:** ${getProductName(what_looking_for, 'optimal')}
**Cena:** ${getPrice(budget_range, 'mid')} z≈Ç/m¬≤
**Sklep:** Leroy Merlin
**Opis:** Najlepszy stosunek jako≈õci do ceny. Trwa≈Ço≈õƒá i estetyka w rozsƒÖdnej cenie.

### ü•á OPCJA PREMIUM
**Produkt:** ${getProductName(what_looking_for, 'premium')}
**Cena:** ${getPrice(budget_range, 'high')} z≈Ç/m¬≤
**Sklep:** OBI
**Opis:** Najwy≈ºsza jako≈õƒá, d≈Çugotrwa≈Ço≈õƒá i wyjƒÖtkowy design.

## üõ†Ô∏è PRAKTYCZNE PORADY

- **Przygotowanie:** ${getPracticalTip(room_type, 'preparation')}
- **Monta≈º:** ${getPracticalTip(room_type, 'installation')}
- **Konserwacja:** ${getPracticalTip(room_type, 'maintenance')}

## üí∞ SZACUNKOWY KOSZT CA≈ÅKOWITY

- **Opcja ekonomiczna:** ${getTotalCost(budget_range, 'low')} z≈Ç
- **Opcja optymalna:** ${getTotalCost(budget_range, 'mid')} z≈Ç
- **Opcja premium:** ${getTotalCost(budget_range, 'high')} z≈Ç

*Ceny zawierajƒÖ materia≈Çy g≈Ç√≥wne i pomocnicze. Koszt pracy mo≈ºe wynosiƒá dodatkowo 30-50% warto≈õci materia≈Ç√≥w.*

---

## üîß JAK SKONFIGUROWAƒÜ PRAWDZIWE AI?

1. **Sprawd≈∫ plik .env.local** - czy zawiera poprawne klucze Supabase
2. **Wdr√≥≈º Edge Function** - funkcja \`analyze-needs\` musi byƒá aktywna w Supabase
3. **Dodaj klucz OpenAI** - w Settings ‚Üí Edge Functions w panelu Supabase
4. **Przetestuj po≈ÇƒÖczenie** - sprawd≈∫ logi w Edge Functions

Szczeg√≥≈Çowe instrukcje znajdziesz w pliku \`SUPABASE_SETUP.md\`.`
}

const getProductName = (product: string, tier: string): string => {
  const productMap: { [key: string]: { [key: string]: string } } = {
    basic: {
      'p≈Çytki': 'Ceramika Parady≈º Basic',
      'farba': 'Farba Magnat Style',
      'panele': 'Panele Kronopol Basic'
    },
    optimal: {
      'p≈Çytki': 'Ceramika TubƒÖdzin Royal',
      'farba': 'Farba Dulux EasyCare',
      'panele': 'Panele Quick-Step Impressive'
    },
    premium: {
      'p≈Çytki': 'Ceramika Marazzi Grande',
      'farba': 'Farba Benjamin Moore Advance',
      'panele': 'Panele Pergo Extreme'
    }
  }

  const key = Object.keys(productMap[tier]).find(k => 
    product.toLowerCase().includes(k.toLowerCase())
  ) || 'p≈Çytki'
  
  return productMap[tier][key]
}

const getPrice = (budget: string, tier: string): string => {
  const priceMap: { [key: string]: { [key: string]: string } } = {
    'do 1000z≈Ç': { low: '25-35', mid: '40-55', high: '60-80' },
    '1000-5000z≈Ç': { low: '35-45', mid: '50-70', high: '80-120' },
    '5000-10000z≈Ç': { low: '45-60', mid: '70-90', high: '120-180' },
    'powy≈ºej 10000z≈Ç': { low: '60-80', mid: '90-130', high: '180-250' },
    'nie wiem': { low: '30-40', mid: '50-70', high: '80-120' }
  }

  return priceMap[budget]?.[tier] || '40-60'
}

const getTotalCost = (budget: string, tier: string): string => {
  const costMap: { [key: string]: { [key: string]: string } } = {
    'do 1000z≈Ç': { low: '800-1200', mid: '1200-1800', high: '1800-2500' },
    '1000-5000z≈Ç': { low: '1500-2500', mid: '2500-4000', high: '4000-6000' },
    '5000-10000z≈Ç': { low: '4000-6000', mid: '6000-8500', high: '8500-12000' },
    'powy≈ºej 10000z≈Ç': { low: '8000-12000', mid: '12000-18000', high: '18000-25000' },
    'nie wiem': { low: '2000-3000', mid: '3000-5000', high: '5000-8000' }
  }

  return costMap[budget]?.[tier] || '2000-4000'
}

const getPracticalTip = (room: string, type: string): string => {
  const tips: { [key: string]: { [key: string]: string } } = {
    preparation: {
      '≈Åazienka': 'Sprawd≈∫ szczelno≈õƒá instalacji wodnej i wykonaj hydroizolacjƒô',
      'Kuchnia': 'Zabezpiecz instalacjƒô elektrycznƒÖ i zaplanuj miejsca pod AGD',
      'Salon': 'Wyr√≥wnaj pod≈Ço≈ºe i sprawd≈∫ poziom pod≈Çogi',
      'Sypialnia': 'Zapewnij odpowiedniƒÖ wentylacjƒô i izolacjƒô akustycznƒÖ',
      'Inne': 'Przygotuj pod≈Ço≈ºe zgodnie z wymaganiami producenta'
    },
    installation: {
      '≈Åazienka': 'U≈ºyj wodoodpornych klej√≥w i fug, zachowaj dylatacje',
      'Kuchnia': 'Zastosuj kleje odporne na t≈Çuszcze i wysokie temperatury',
      'Salon': 'Rozpocznij monta≈º od ≈õrodka pomieszczenia',
      'Sypialnia': 'Zachowaj ciszƒô podczas prac, pracuj etapami',
      'Inne': 'Przestrzegaj instrukcji producenta i norm bezpiecze≈Ñstwa'
    },
    maintenance: {
      '≈Åazienka': 'Regularnie wietrz pomieszczenie i czy≈õƒá fugi',
      'Kuchnia': 'Chro≈Ñ przed t≈Çuszczami i u≈ºywaj odpowiednich ≈õrodk√≥w',
      'Salon': 'Regularne odkurzanie i ochrona przed zarysowaniami',
      'Sypialnia': 'Utrzymuj odpowiedniƒÖ wilgotno≈õƒá powietrza',
      'Inne': 'Regularna konserwacja zgodnie z zaleceniami producenta'
    }
  }

  return tips[type][room] || tips[type]['Inne']
}